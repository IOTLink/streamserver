// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.pro

/*
Package stream is a generated protocol buffer package.

It is generated from these files:
	stream.pro

It has these top-level messages:
	RegisterRequest
	RegisterReply
	AssetEnroll
	AssetRegister
	TransactionRequest
	QueryRequest
	ResultsReply
*/
package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	User    string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Pwd     string `protobuf:"bytes,2,opt,name=pwd" json:"pwd,omitempty"`
	Chainid string `protobuf:"bytes,3,opt,name=chainid" json:"chainid,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *RegisterRequest) GetPwd() string {
	if m != nil {
		return m.Pwd
	}
	return ""
}

func (m *RegisterRequest) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

type RegisterReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Appid   string `protobuf:"bytes,2,opt,name=appid" json:"appid,omitempty"`
	Appkey  string `protobuf:"bytes,3,opt,name=appkey" json:"appkey,omitempty"`
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RegisterReply) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *RegisterReply) GetAppkey() string {
	if m != nil {
		return m.Appkey
	}
	return ""
}

type AssetEnroll struct {
	Chainid     string `protobuf:"bytes,1,opt,name=chainid" json:"chainid,omitempty"`
	Chaincodeid string `protobuf:"bytes,2,opt,name=chaincodeid" json:"chaincodeid,omitempty"`
	Appid       string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Payload     string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *AssetEnroll) Reset()                    { *m = AssetEnroll{} }
func (m *AssetEnroll) String() string            { return proto.CompactTextString(m) }
func (*AssetEnroll) ProtoMessage()               {}
func (*AssetEnroll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssetEnroll) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

func (m *AssetEnroll) GetChaincodeid() string {
	if m != nil {
		return m.Chaincodeid
	}
	return ""
}

func (m *AssetEnroll) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AssetEnroll) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type AssetRegister struct {
	Chainid     string `protobuf:"bytes,1,opt,name=chainid" json:"chainid,omitempty"`
	Chaincodeid string `protobuf:"bytes,2,opt,name=chaincodeid" json:"chaincodeid,omitempty"`
	Appid       string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
	Payload     string `protobuf:"bytes,4,opt,name=payload" json:"payload,omitempty"`
}

func (m *AssetRegister) Reset()                    { *m = AssetRegister{} }
func (m *AssetRegister) String() string            { return proto.CompactTextString(m) }
func (*AssetRegister) ProtoMessage()               {}
func (*AssetRegister) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AssetRegister) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

func (m *AssetRegister) GetChaincodeid() string {
	if m != nil {
		return m.Chaincodeid
	}
	return ""
}

func (m *AssetRegister) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func (m *AssetRegister) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type TransactionRequest struct {
	Chainid      string `protobuf:"bytes,1,opt,name=chainid" json:"chainid,omitempty"`
	Chaincodeid  string `protobuf:"bytes,2,opt,name=chaincodeid" json:"chaincodeid,omitempty"`
	Appidower    string `protobuf:"bytes,3,opt,name=appidower" json:"appidower,omitempty"`
	Appidreceive string `protobuf:"bytes,4,opt,name=appidreceive" json:"appidreceive,omitempty"`
	Payload      string `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionRequest) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

func (m *TransactionRequest) GetChaincodeid() string {
	if m != nil {
		return m.Chaincodeid
	}
	return ""
}

func (m *TransactionRequest) GetAppidower() string {
	if m != nil {
		return m.Appidower
	}
	return ""
}

func (m *TransactionRequest) GetAppidreceive() string {
	if m != nil {
		return m.Appidreceive
	}
	return ""
}

func (m *TransactionRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type QueryRequest struct {
	Chainid     string `protobuf:"bytes,1,opt,name=chainid" json:"chainid,omitempty"`
	Chaincodeid string `protobuf:"bytes,2,opt,name=chaincodeid" json:"chaincodeid,omitempty"`
	Appid       string `protobuf:"bytes,3,opt,name=appid" json:"appid,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueryRequest) GetChainid() string {
	if m != nil {
		return m.Chainid
	}
	return ""
}

func (m *QueryRequest) GetChaincodeid() string {
	if m != nil {
		return m.Chaincodeid
	}
	return ""
}

func (m *QueryRequest) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

type ResultsReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (m *ResultsReply) Reset()                    { *m = ResultsReply{} }
func (m *ResultsReply) String() string            { return proto.CompactTextString(m) }
func (*ResultsReply) ProtoMessage()               {}
func (*ResultsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResultsReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ResultsReply) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "stream.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "stream.RegisterReply")
	proto.RegisterType((*AssetEnroll)(nil), "stream.AssetEnroll")
	proto.RegisterType((*AssetRegister)(nil), "stream.AssetRegister")
	proto.RegisterType((*TransactionRequest)(nil), "stream.TransactionRequest")
	proto.RegisterType((*QueryRequest)(nil), "stream.QueryRequest")
	proto.RegisterType((*ResultsReply)(nil), "stream.ResultsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamServer service

type StreamServerClient interface {
	RegisterClient(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	EnrollAsset(ctx context.Context, in *AssetEnroll, opts ...grpc.CallOption) (*ResultsReply, error)
	RegisterAsset(ctx context.Context, in *AssetRegister, opts ...grpc.CallOption) (*ResultsReply, error)
	TransactionAsset(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*ResultsReply, error)
	QueryAsset(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ResultsReply, error)
}

type streamServerClient struct {
	cc *grpc.ClientConn
}

func NewStreamServerClient(cc *grpc.ClientConn) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) RegisterClient(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) EnrollAsset(ctx context.Context, in *AssetEnroll, opts ...grpc.CallOption) (*ResultsReply, error) {
	out := new(ResultsReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/EnrollAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) RegisterAsset(ctx context.Context, in *AssetRegister, opts ...grpc.CallOption) (*ResultsReply, error) {
	out := new(ResultsReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/RegisterAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) TransactionAsset(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*ResultsReply, error) {
	out := new(ResultsReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/TransactionAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) QueryAsset(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ResultsReply, error) {
	out := new(ResultsReply)
	err := grpc.Invoke(ctx, "/stream.StreamServer/QueryAsset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StreamServer service

type StreamServerServer interface {
	RegisterClient(context.Context, *RegisterRequest) (*RegisterReply, error)
	EnrollAsset(context.Context, *AssetEnroll) (*ResultsReply, error)
	RegisterAsset(context.Context, *AssetRegister) (*ResultsReply, error)
	TransactionAsset(context.Context, *TransactionRequest) (*ResultsReply, error)
	QueryAsset(context.Context, *QueryRequest) (*ResultsReply, error)
}

func RegisterStreamServerServer(s *grpc.Server, srv StreamServerServer) {
	s.RegisterService(&_StreamServer_serviceDesc, srv)
}

func _StreamServer_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).RegisterClient(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_EnrollAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetEnroll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).EnrollAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/EnrollAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).EnrollAsset(ctx, req.(*AssetEnroll))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_RegisterAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).RegisterAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/RegisterAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).RegisterAsset(ctx, req.(*AssetRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_TransactionAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).TransactionAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/TransactionAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).TransactionAsset(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_QueryAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).QueryAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.StreamServer/QueryAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).QueryAsset(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StreamServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _StreamServer_RegisterClient_Handler,
		},
		{
			MethodName: "EnrollAsset",
			Handler:    _StreamServer_EnrollAsset_Handler,
		},
		{
			MethodName: "RegisterAsset",
			Handler:    _StreamServer_RegisterAsset_Handler,
		},
		{
			MethodName: "TransactionAsset",
			Handler:    _StreamServer_TransactionAsset_Handler,
		},
		{
			MethodName: "QueryAsset",
			Handler:    _StreamServer_QueryAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stream.pro",
}

func init() { proto.RegisterFile("stream.pro", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x53, 0x4d, 0x8f, 0xda, 0x30,
	0x10, 0x25, 0x7c, 0x8a, 0x21, 0xb4, 0xc8, 0x85, 0x36, 0x42, 0x3d, 0x20, 0x9f, 0x7a, 0xe2, 0xd0,
	0xde, 0x38, 0x54, 0x2a, 0x55, 0x7b, 0x27, 0x54, 0xea, 0xb5, 0x6e, 0x32, 0xa2, 0x51, 0x43, 0xec,
	0xda, 0x0e, 0x28, 0xea, 0x5f, 0xda, 0x5f, 0xb3, 0xbf, 0x68, 0x85, 0x13, 0x13, 0x67, 0x59, 0xb4,
	0x87, 0x5d, 0xed, 0x6d, 0xde, 0x64, 0xe6, 0xcd, 0x73, 0xe6, 0x0d, 0x80, 0xd2, 0x12, 0xd9, 0x7e,
	0x29, 0x24, 0x27, 0xfd, 0x32, 0xa6, 0x1b, 0x78, 0x1d, 0xe2, 0x2e, 0x51, 0x1a, 0x65, 0x88, 0xff,
	0x72, 0x54, 0x9a, 0x10, 0xe8, 0xe6, 0x0a, 0x65, 0xe0, 0x2d, 0xbc, 0x0f, 0xc3, 0xd0, 0xc4, 0x64,
	0x02, 0x1d, 0x71, 0x8c, 0x83, 0xb6, 0x49, 0x9d, 0x42, 0x12, 0xc0, 0x20, 0xfa, 0xc3, 0x92, 0x2c,
	0x89, 0x83, 0x8e, 0xc9, 0x5a, 0x48, 0x7f, 0xc2, 0xb8, 0xa6, 0x14, 0x69, 0x71, 0x2a, 0xdd, 0xa3,
	0x52, 0x6c, 0x87, 0x15, 0xa7, 0x85, 0x64, 0x0a, 0x3d, 0x26, 0x44, 0x62, 0x89, 0x4b, 0x40, 0xde,
	0x42, 0x9f, 0x09, 0xf1, 0x17, 0x8b, 0x8a, 0xb9, 0x42, 0xb4, 0x80, 0xd1, 0x17, 0xa5, 0x50, 0x7f,
	0xcb, 0x24, 0x4f, 0x53, 0x57, 0x81, 0xd7, 0x50, 0x40, 0x16, 0x30, 0x32, 0x61, 0xc4, 0x63, 0x3c,
	0x93, 0xbb, 0xa9, 0x7a, 0x70, 0xc7, 0x1d, 0x1c, 0xc0, 0x40, 0xb0, 0x22, 0xe5, 0x2c, 0x0e, 0xba,
	0x25, 0x63, 0x05, 0xe9, 0x7f, 0x18, 0x9b, 0xd1, 0xf6, 0x61, 0x2f, 0x3a, 0xfc, 0xc6, 0x03, 0xf2,
	0x43, 0xb2, 0x4c, 0xb1, 0x48, 0x27, 0x3c, 0xb3, 0x7b, 0x7a, 0x8a, 0x84, 0xf7, 0x30, 0x34, 0x53,
	0xf9, 0x11, 0x65, 0x25, 0xa3, 0x4e, 0x10, 0x0a, 0xbe, 0x01, 0x12, 0x23, 0x4c, 0x0e, 0x58, 0xe9,
	0x69, 0xe4, 0x5c, 0xb9, 0xbd, 0xa6, 0xdc, 0x5f, 0xe0, 0x6f, 0x72, 0x94, 0xc5, 0x73, 0xe8, 0x7c,
	0xf0, 0x57, 0xd1, 0x35, 0xf8, 0x21, 0xaa, 0x3c, 0xd5, 0xea, 0x31, 0x83, 0x39, 0x2a, 0xdb, 0x0d,
	0x95, 0x1f, 0x6f, 0xdb, 0xe0, 0x6f, 0xcd, 0x0d, 0x6c, 0x51, 0x1e, 0x50, 0x92, 0x35, 0xbc, 0xb2,
	0xdb, 0xfd, 0x9a, 0x26, 0x98, 0x69, 0xf2, 0x6e, 0x59, 0x1d, 0xcc, 0xbd, 0x0b, 0x99, 0xcf, 0x2e,
	0x3f, 0x88, 0xb4, 0xa0, 0x2d, 0xb2, 0x82, 0x51, 0x69, 0x4e, 0x63, 0x16, 0xf2, 0xc6, 0xd6, 0x39,
	0xb6, 0x9d, 0x4f, 0xeb, 0xe6, 0xfa, 0x09, 0xb4, 0x45, 0x3e, 0xd7, 0x67, 0x53, 0x76, 0xcf, 0x1a,
	0xdd, 0xf6, 0xdb, 0xd5, 0xfe, 0xef, 0x30, 0x71, 0x4c, 0x52, 0x52, 0xcc, 0x6d, 0xed, 0xa5, 0x7d,
	0xae, 0xf2, 0xac, 0x00, 0xcc, 0xfa, 0x4a, 0x86, 0x73, 0x95, 0xbb, 0xd2, 0x6b, 0xbd, 0xbf, 0xfb,
	0x42, 0x72, 0xcd, 0x3f, 0xdd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x46, 0xdc, 0xb6, 0x51, 0x6a, 0x04,
	0x00, 0x00,
}
